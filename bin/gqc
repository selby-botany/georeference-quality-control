#!/bin/bash
#
#    Geolocation Quality Control (gqc)
#
#    Copyright (C) 2020 Marie Selby Botanical Gardens
#

set -o errexit
set -o errtrace
set -o functrace
set -o nounset
set -o pipefail

export GQC_DEBUG="${GQC_DEBUG:-false}"
GQC_DEBUG=$(echo "${GQC_DEBUG}" | tr A-Z a-z)
if [[ "${GQC_DEBUG}" == "true" ]]; then set -xv; fi
export GQC_DEV="${GQC_DEV:-false}"
GQC_DEV=$(echo "${GQC_DEV}" | tr A-Z a-z)
GQC_PID=$$

prg=${BASH_SOURCE[0]}
([[ -n "${prg}" ]] && [[ -f "${prg}" ]]) || (echo "[FATAL] cannot locate: '$0'" 1>&2; kill -USR2 $GQC_PID)
task=$(basename -- "$0")
taskdir=$(cd $(dirname -- "$0")/.. > /dev/null && pwd)


function gqcw.build_docker_image() {
    local repository=${1:?Need repository} && shift
    local tag=${1:?Need tag} && shift
    local dryrun=${1:?Need dryrun} && shift
    local othertags="${@}"
    local image="${repository}:${tag}"
    local cmd="docker build --tag ${image} ${othertags} ${taskdir}"
    if [[ "${dryrun}" == "true" ]]; then
        gqcw.dryrun "build command: ${cmd}"
    else 
        local tmp="${TMPDIR}/${task}-${$}-${RANDOM}"
        gqcw.info "building image: '${image}' ..."
        gqcw.debug "build command: ${cmd}"
        if (! (cd "${taskdir}" && ${cmd} >${tmp} 2>&1)); then
            gqcw.fatal "image can not be built: '${image}'"
            cat "${tmp}" | while read line ; do
                gqcw.debug "${line}'"
            done
            gqcw.exit_1
            ÃŸfalse
        fi
    fi
    gqcw.info "image build complete: '${image}'"
    gqcw.find_docker_image  "${repository}" "${tag}"
}

function gqcw.debug () {
    ([[ "${GQC_DEV}" == 'true' ]] && echo "[DEBUG] ${@}" 1>&2) || true
}

function gqcw.dryrun () {
    echo "[DRYRUN] ${@}" 1>&2
}

function gqcw.exit_0 () {
    kill -USR1 $GQC_PID
    exit 0
}

function gqcw.exit_1 () {
    kill -USR1 $GQC_PID
    exit 1
}

function gqcw.fatal () {
    gqcw.fatal_no_exit "${@}" 1>&2
    gqcw.exit_1
}

function gqcw.fatal_no_exit () {
    echo "[FATAL] ${@}" 1>&2
}

function gqcw.find_docker_image() {
    local repository=${1:?Need repository}
    local tag=${2:?Need tag}
    [[ -n $(docker images --quiet ${repository}:${tag} | uniq | head --lines 1) ]]
}

function gqcw.get_ini() {
    local var=${1:?Need variable}
    local default=${1:-}

    local inifiles=("${HOME}/.gqc" "/usr/local/selby/include/gqc.init" "${taskdir}/gqc.init")
    local retval=${default}
    for inifile in "${inifiles[@]}"; do
        if [[ -r "${inifile}" ]]; then
            val=$(cat "${inifile}" | grep --text --extended-regexp -- "^${var}=" | tail -n 1 | cut -d= -f2- | sed "s/^\([\"']\)\(.*\)\1\$/\2/g")
            retval=${val:-${retval}}
        fi
    done
    echo $retval
}

function gqcw.info () {
    echo "[INFO] ${@}" 1>&2
}

function gqcw.main() {
    local cachedir="${taskdir}/cache"
    local logdir=
    local logfile=
    local build=true
    local debug=${GQC_DEBUG}
    local development_mode=${GQC_DEV}
    local docker_build_arguments=
    local docker_run_command="/usr/local/selby/bin/gqc"
    local dryrun=false
    local pull=true
    
    local repository=selbybotany/gqc
    local tag=$(cd "${taskdir}" && git branch --show-current)
    local build_tags=
    local container_name=$(echo "${repository}" | tr -d '[:space:]' | tr -c '[:alnum:]' '-')
    local mount=

    local otherargs=
    while [[ "${#}" -gt "0" ]]; do
        case ${1} in
        --cache-directory|-C)
            local file="${2}" && shift
            ([[ -d "${file}" ]] && [[ -w "${file}" ]]) || (gqcw.fatal "cache directory does not exist or can not be written: '${file}'")
            cachedir="${file}"
            ;;
        --container-name|--name|-n)
            container_name="${2}" && shift
            ;;
        --log-file|-L)
            local file="${2}" && shift
            [[ -e "${file}" ]] || (touch -- "${file}" || gqcw.fatal "log file can not be written: '${file}'")
            [[ -w "${file}" ]] || (gqcw.fatal "log file can not be written: '${file}'")
            logfile="${file}"
            ;;
        --no-build)
            build=false
            ;;
        --no-pull)
            pull=false
            ;;
        --Xbuild-arguments)
            docker_build_arguments="${docker_build_arguments} ${2}" && shift
            ;;
        --Xdebug)
            set -xv
            debug=true
            GQC_DEBUG=true
            ;;
        --Xdev)
            development_mode=true
            GQC_DEV=true
            ;;
        --Xdryrun)
            dryrun=true
            ;;
        --Xrepository)
            docker_repository="${2}" && shit
            ;;
        --Xrun-command)
            docker_run_command="${2}" && shift
            ;;
        --Xtag)
            build_tags="${build_tags} ${2}" && shift
            ;;
        --Xmount)
            mount="${mount} --mount ${2}" && shift
            development_mode=true
            GQC_DEV=true
            ;;
        (*)
            otherargs="${otherargs} ${1}"
            ;;
        esac
        shift
    done

    local image=${repository}:${tag}
    local tmp=
    local t=
    for t in ${build_tags}; do
        tmp="${tmp} --tag ${repository}:${t}"
    done
    build_tags="${tmp}"

    if (! gqcw.find_docker_image  "${repository}" "${tag}") && [[ "${pull}" == "true" ]]; then
        gqcw.pull_docker_image "${repository}" "${tag}" || true
    fi
    if (! gqcw.find_docker_image  "${repository}" "${tag}") && [[ "${build}" == "true" ]]; then
        gqcw.build_docker_image "${repository}" "${tag}" "${dryrun}" "${build_tags}" || true
    fi
    if (! gqcw.find_docker_image  "${repository}" "${tag}"); then
        gqcw.fatal "docker image not found: ${image}"
    fi

    local exports=
    local host=$(gqcw.get_ini LOCATIONIQ_API_HOST)
    [[ -n "${host}" ]] && exports="${exports} --env LOCATIONIQ_API_HOST=${host}"
    local token=$(gqcw.get_ini LOCATIONIQ_API_TOKEN)
    [[ -n "${token}" ]] && exports="${exports} --env LOCATIONIQ_API_TOKEN=${token}"

    local opts="--interactive --rm"
    [[ -n "${container_name}" ]] && opts="${opts} --name ${container_name}"
    opts="${opts} --env GQC_DEBUG=${GQC_DEBUG}"
    opts="${opts} --env GQC_DEV=${GQC_DEV}"
    [[ -n "${docker_build_arguments}" ]] && opts="${opts} ${docker_build_arguments}"
    [[ -n "${exports}" ]] && opts="${opts} ${exports}"
    opts="${opts} --sig-proxy"
    opts="${opts} --stop-signal SIGTERM"
    opts="${opts} --mount type=bind,src=${cachedir},dst=/var/cache/selby"
    if [[ -n "${logfile}" ]]; then
        local dir=$(cd $(dirname -- "${logfile}") > /dev/null && pwd)
        local file=$(basename -- "${logfile}")
        opts="${opts} --mount type=bind,src=${dir},dst=/var/log/selby"
        otherargs="--log-file /var/log/selby/${file} ${otherargs}"
    else
        opts="${opts} --mount type=bind,src=${taskdir}/log,dst=/var/log/selby"
    fi
    if [[ -n "${mount}" ]]; then
        opts="${opts} ${mount}"
    fi
    if [[ "${debug}" == "true" ]]; then
       otherargs="--Xdebug ${otherargs}"
    fi
    if [[ "${development_mode}" == "true" ]]; then
        opts="${opts} --mount type=bind,src=${taskdir}/src,dst=/usr/local/selby"
        otherargs="--Xdev ${otherargs}"
    fi

    local cmd="docker run ${opts} ${image} ${docker_run_command} ${otherargs}"
    if [[ "${dryrun}" == "true" ]]; then
        gqcw.dryrun "GQC_DEBUG=${GQC_DEBUG} GQC_DEV=${GQC_DEV} ${cmd}" "${@}"
    else
        [[ "${debug}" == "true" ]] && gqcw.debug "GQC_DEBUG=${GQC_DEBUG} GQC_DEV=${GQC_DEV} ${cmd} ${@}"
        GQC_DEBUG=${GQC_DEBUG} GQC_DEV=${GQC_DEV} ${cmd} "${@}"
    fi
}

function gqcw.pull_docker_image() {
    local repository=${1:?Need repository}
    local tag=${2:?Need tag}
    local dryrun=${3:-false}
    local image=${repository}:${tag}
    if [[ "${dryrun}" == 'true' ]]; then
        gqcw.dryrun "pull command: docker pull ${image}"
    else
        (
            cd "${taskdir}"
            local cmd="docker pull ${image}"
            gqcw.info "attempting to pull '${image}' from dockerhub ..."
            gqcw.debug "pull command: docker pull ${image}"
            docker pull ${image} >/dev/null 2>&1 && 
            gqcw.info "image pulled from dockerhub: '${image}'"
        ) || (gqcw.info "image not found on dockerhub: '${image}'")
    fi
    gqcw.find_docker_image  "${repository}" "${tag}"
}

TMPDIR="${TMPDIR}${task}-${$}-${RANDOM}" && mkdir -p ${TMPDIR}
trap 'rm -rf ${TMPDIR}; exit 0' USR1
trap 'rm -rf ${TMPDIR}; exit 1' USR2
trap 's=$?; rm -rf ${TMPDIR}; exit $s' HUP INT TERM EXIT
(
    gqcw.main "$@"
)
trap - HUP INT TERM EXIT USR1 USR2
exit 0
